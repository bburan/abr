import os.path
from pathlib import Path
import urllib.request

from enaml.application import deferred_call
from enaml.core.api import Looper
from enaml.layout.api import AreaLayout, hbox, DockBarLayout, InsertItem, InsertTab, spacer, TabLayout, vbox
from enaml.qt.QtCore import Qt
from enaml.stdlib.dialog_buttons import DialogButton
from enaml.stdlib.message_box import critical, information, warning
from enaml.widgets.api import (Action, ActionGroup, CheckBox, Container,
                               DockArea, DockItem, GroupBox, Html, Label, Feature, Form,
                               HGroup, MainWindow, Menu, MPLCanvas, Notebook,
                               ObjectCombo, Page, ProgressBar, PushButton,
                               ToolButton, VGroup)

from abr import main_icon
from abr.datatype import Point


def bind(figure, presenter):
    i = Interactor(presenter)
    figure.canvas.mpl_connect('key_press_event', lambda e: i.key_press(e))
    figure.canvas.mpl_connect('pick_event', lambda e: i.pick_event(e))
    figure.canvas.mpl_connect('motion_notify_event', lambda e: i.motion_notify(e))
    figure.canvas.mpl_connect('button_release_event', lambda e: i.button_release(e))


class ABRCanvas(MPLCanvas):

    def set_focus(self):
        try:
            self.figure.canvas.setFocus(Qt.OtherFocusReason)
        except Exception as e:
            pass


class Interactor:

    def __init__(self, presenter):
        self.selected_point = None
        self.presenter = presenter

    def pick_event(self, event):
        for i, line_plot in enumerate(self.presenter.plots):
            if line_plot.plot == event.artist:
                self.presenter.current = i
                if not self.presenter.threshold_marked:
                    self.presenter.set_threshold()
            for point, point_plot in line_plot.point_plots.items():
                if point_plot.plot == event.artist:
                    self.selected_point = point
                    self.presenter.toggle = point
                    self.presenter.current = i
                    return

    def button_release(self, event):
        self.selected_point = None

    def motion_notify(self, event):
        if self.selected_point is not None:
            self.presenter.set_selected_point(event.xdata)

    def key_press(self, event):
        try:
            if event.key == 'down':
                self.presenter.current -= 1
            elif event.key == 'up':
                self.presenter.current += 1
            elif event.key == 't':
                self.presenter.set_threshold()
            elif event.key == 'alt+up':
                self.presenter.set_subthreshold()
            elif event.key == 'alt+down':
                self.presenter.set_suprathreshold()
            elif event.key in ('-', '_'):
                self.presenter.scale *= 1.1
            elif event.key in ('=', '+'):
                self.presenter.scale *= 0.9
            elif event.key == 'i':
                self.presenter.guess()
            elif event.key == 'u':
                self.presenter.update_point()
            elif event.key == 's':
                self.presenter.save()
                if not self.presenter.batch_mode:
                    information(None, 'Data', 'Analysis saved to file.')
                elif (self.presenter.current_model + 1) == len(self.presenter.unprocessed):
                    information(None, 'Data', 'No more datasets to analyze.')
            elif event.key == 'right':
                self.presenter.move_selected_point(('zero_crossing', 1))
            elif event.key == 'left':
                self.presenter.move_selected_point(('zero_crossing', -1))
            elif event.key == 'alt+right':
                self.presenter.move_selected_point(('time', 1e-5))
            elif event.key == 'alt+left':
                self.presenter.move_selected_point(('time', -1e-5))
            elif event.key == 'n':
                self.presenter.normalized = not self.presenter.normalized
            elif event.key in ('1', '2', '3', '4', '5'):
                self.presenter.toggle = int(event.key), Point.PEAK
            elif event.key in ('alt+1', 'alt+2', 'alt+3', 'alt+4', 'alt+5'):
                self.presenter.toggle = int(event.key[-1]), Point.VALLEY
            elif event.key == 'pagedown':
                self.presenter.load_next()
            elif event.key == 'pageup':
                self.presenter.load_prior()
        except Exception as e:
            critical(None, 'Error', str(e))


def get_title(frequency, filename, show_filename):
    if show_filename:
        filename = os.path.split(os.path.split(filename)[0])[1]
        return '{} kHz: {}'.format(frequency, filename)
    else:
        return '{} kHz'.format(frequency)


enamldef MPLContainer(Container): di:

    attr presenter
    attr analyzed_filenames = []

    constraints = [
        vbox(
            hbox(show_filename, supra, sub, spacer, clear, load, spacer),
            filename,
            canvas
        ),
        supra.width == sub.width,
        load.width == 200,
    ]

    ToolButton: load:
        text = 'Load analysis'
        popup_mode = 'instant'
        Menu:
            Looper: looper:
                iterable << analyzed_filenames[:]
                Menu:
                    title << loop_item.stem
                    Action:
                        text = 'Plot'
                        triggered ::
                            presenter.load_analysis(loop_item)
                            canvas.set_focus()
                    Action:
                        text = 'Delete'
                        triggered ::
                            mesg = 'Are you sure you want to remove this file?'
                            buttons = [
                                DialogButton('Yes', 'accept'),
                                DialogButton('No', 'reject'),
                            ]
                            result = warning(None, 'Delete', mesg, buttons)
                            if result.text == 'Yes':
                                loop_item.unlink()
                                items = di.analyzed_filenames[:]
                                items.remove(loop_item)
                                di.analyzed_filenames = items
                            canvas.set_focus()

    ToolButton: clear:
        text = 'Clear'
        popup_mode = 'instant'
        Menu:
            Action:
                text = 'All'
                triggered ::
                    presenter.clear_points()
                    canvas.set_focus()
            Action:
                text = 'Peaks'
                triggered::
                    presenter.clear_peaks()
                    canvas.set_focus()
            Action:
                text = 'Valleys'
                triggered ::
                    presenter.clear_valleys()
                    canvas.set_focus()

    PushButton: supra:
        text = 'All above threshold'
        clicked ::
            presenter.set_suprathreshold()
            canvas.set_focus()

    PushButton: sub:
        text = 'All below threshold'
        clicked ::
            presenter.set_subthreshold()
            canvas.set_focus()
            print('setting focus')

    CheckBox: show_filename:
        checked = False
        text = 'Show info'

    Label: filename:
        visible << show_filename.checked
        text << '{} {} Hz'.format(getattr(presenter.model, 'id', ''),
                                  getattr(presenter.model, 'freq', ''))

    ABRCanvas: canvas:
        figure << presenter.figure
        toolbar_visible = False
        initialized ::
            deferred_call(bind, figure, presenter)
            deferred_call(self.set_focus)

enamldef HelpContainer(Container):
    Html:
        source = '''
        <h3>General interaction</h3>
        <dl>
            <dt>up/down arrow</dt> <dd>Select waveform</dd>
            <dt>n</dt> <dd>Toggle normalized mode</dd>
            <dt>+/-</dt> <dd>Adjust zoom</dd>
            <dt>i</dt> <dd>Make initial guess for peaks/valleys</dd>
            <dt>u</dt> <dd>Update guess only for selected peak/valley</dd>
            <dt>t</dt> <dd>Set threshold</dd>
            <dt>number (e.g., 1, 2, 3, 4, 5)</dt> <dd>Select peak</dd>
            <dt>alt + number (e.g., 1, 2, 3, 4, 5)</dt> <dd>Select valley</dd>
            <dt>left/right arrow</dt> <dd>Move selected peak/valley (snap mode)</dd>
            <dt>alt + left/right arrow</dt> <dd>Move selected peak/valley (fine adjustment)</dd>
            <dt>s</dt> <dd>Save analysis</dd>
        </dl>
        '''


enamldef SerialWindow(MainWindow):

    alias presenter: container.presenter

    initial_size = (600, 900)
    title = 'ABR batch mode'
    icon = main_icon

    closing ::
        presenter.scan_stop()

    Container:
        constraints = [
            vbox(
                hbox(label, progress),
                notebook,
            )
        ]

        Label: label:
            text << 'Progress (n={})'.format(presenter.n_unprocessed) \
                if presenter.scan_complete \
                else 'Scanning ... (n={})'.format(presenter.n_unprocessed)
        ProgressBar: progress:
            value << presenter.current_model
            maximum << len(presenter.unprocessed) if presenter.scan_complete else 0
            text_visible = True

        Notebook: notebook:
            Page:
                title = 'Data'
                closable = False
                MPLContainer: container:
                    pass

            Page:
                title = 'Instructions'
                closable = False
                HelpContainer:
                    pass

enamldef MPLDockItem(DockItem):

    alias presenter: container.presenter
    alias analyzed_filenames: container.analyzed_filenames

    MPLContainer: container:
        pass


def add_dock_item(dock_area, model, path, presenter, analyzed_filenames):
    items = dock_area.dock_items()
    n_items = len(items) - 1
    target = items[-1].name if n_items else ''
    title = '{:.2f} kHz - {}'.format(model.freq, os.path.basename(path))
    item = MPLDockItem(dock_area,
                       name='dock_{}'.format(n_items),
                       title=title,
                       presenter=presenter,
                       analyzed_filenames=analyzed_filenames)
    op = InsertTab(item=item.name, target=target)
    dock_area.update_layout(op)


def load_files(parser, latencies, filenames, dock_area):
    from abr.presenter import WaveformPresenter
    errors = []
    for filename, frequencies in filenames:
        try:
            for model in parser.load(filename, frequencies):
                analyzed_filenames = \
                    parser.find_analyzed_files(model.filename, model.freq)
                presenter = WaveformPresenter(parser, latencies)
                add_dock_item(dock_area, model, filename, presenter,
                              analyzed_filenames)
                presenter.load(model)
        except Exception as e:
            errors.append(filename)

        if errors:
            errors = "\n".join(f'{e}' for e in errors)
            mesg = f'Could not load ABR data from\n{errors}'
            critical(None, 'Could not load files', mesg)


enamldef DNDWindow(MainWindow):

    attr parser
    attr latencies
    icon = main_icon

    initial_size = (600, 900)
    title = 'ABR analysis'

    Container:

        DockArea: dock_area:
            name = 'dock_area'
            features = Feature.DropEnabled
            layout = AreaLayout(
                dock_bars=[DockBarLayout('help', position='left')],
            )

            drag_enter => (event):
                if event.mime_data().has_format('text/uri-list'):
                    event.accept_proposed_action()

            drop => (event):
                text = event.mime_data().data('text/uri-list').decode('utf-8')
                filenames = []
                for t in text.strip().split('\n'):
                    t = urllib.parse.unquote(t).strip()
                    fragments = urllib.parse.urlsplit(t)
                    path = Path(urllib.request.url2pathname(fragments.path))
                    filenames.append((path, None))
                load_files(parser, latencies, filenames, dock_area)

            DockItem:
                name = 'help'
                title = 'Help'
                closable = False
                HelpContainer:
                    pass


def mpl_connect(figure, event, handler):
    figure.canvas.mpl_connect(event, handler)


enamldef CompareWindow(MainWindow):

    attr compare
    attr parser

    initial_size = (1000, 600)
    icon = main_icon

    initialized ::
        compare.observe('selected', selected_changed)

    func selected_changed(event):
        load_files(parser, {}, event['value'], dock_area)

    Container:

        constraints = [
            hbox(
                vbox(
                    hbox(x_label, x_select),
                    hbox(y_label, y_select),
                    hbox(d_label, d_checkbox),
                    hbox(j_label, j_checkbox),
                    canvas,
                ),
                dock_area
            ),
            x_label.width == y_label.width,
            x_label.width == d_label.width,
            x_label.width == j_label.width,
            x_select.width == y_select.width
        ]

        Label: x_label:
            text = 'X'

        ObjectCombo: x_select:
            items << list(compare.data.columns)
            selected := compare.x_column

        Label: y_label:
            text = 'Y'

        ObjectCombo: y_select:
            items << list(compare.data.columns)
            selected := compare.y_column

        Label: d_label:
            text = 'Plot as difference'

        CheckBox: d_checkbox:
            checked := compare.as_difference

        Label: j_label:
            text = 'Jitter data'

        CheckBox: j_checkbox:
            checked := compare.jitter

        MPLCanvas: canvas:
            figure << compare.figure
            initialized ::
                deferred_call(mpl_connect, compare.figure, 'pick_event',
                              compare.pick_handler)

        DockArea: dock_area:
            name = 'dock_area'
